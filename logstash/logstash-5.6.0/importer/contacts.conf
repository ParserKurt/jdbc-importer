#file: import.conf
input {
	jdbc {
		# mysql jdbc connection string to our database, mydb
		jdbc_connection_string => "jdbc:mysql://localhost/hawkeye?zeroDateTimeBehavior=convertToNull"
		# the user we wish to execute our statement as
		jdbc_user => "root"
		jdbc_password => "root"
		jdbc_driver_library => "/home/kurt/migrations/jdbc-importer/mysql-connector-java-5.1.45/mysql-connector-java-5.1.45-bin.jar"
		jdbc_driver_class => "com.mysql.jdbc.Driver"
		jdbc_fetch_size => "100000"
		use_column_value => true
		jdbc_paging_enabled => "true"
		tracking_column => "contact_id"
		tracking_column_type => "numeric"
		statement => "SELECT  contact.is_valid as 'contact_is_valid', contact.keyword_id, account.id as 'account_id', contact.first_name, cg.id as 'contact_group_id', contact.last_name, contact.name, cg.name as 'contact_group_name', updater_user.email as 'updater_email', contact.mobile_number as 'mobile_number', contact.id as 'contact_id' FROM (`contact`) LEFT OUTER JOIN `user` creator_user ON `creator_user`.`id` = `contact`.`created_by_id` LEFT OUTER JOIN `user` updater_user ON `updater_user`.`id` = `contact`.`updated_by_id` LEFT OUTER JOIN `account` account ON `account`.`id` = `contact`.`account_id` LEFT OUTER JOIN `keyword` keyword ON `keyword`.`id` = `contact`.`keyword_id` LEFT OUTER JOIN `contactgroup_contact` cgc ON `cgc`.`contact_id` = `contact`.`id` LEFT OUTER JOIN `contact_group` cg on `cgc`.`contactgroup_id` = `cg`.`id` "
	}
}



filter {
  aggregate {
    task_id => "%{contact_id}"
    code => "
    map['group_list'] ||= []
          map['contact_group'] ||= []
          if (event.get('contact_group_id') != nil)
            if !( map['group_list'].include? event.get('contact_group_id') )
              map['group_list'] << event.get('contact_group_id')
              map['contact_group'] << {
                'id' => event.get('contact_group_id'),
                'name' => event.get('contact_group_name'),
              }
            end
          end
    map['contact_id'] = event.get('contact_id')
	map['account_id'] = event.get('account_id')
	map['keyword_id'] = event.get('keyword_id')
	map['first_name'] = event.get('first_name')
	map['last_name'] = event.get('last_name')
	map['mobile_number'] = event.get('mobile_number')
	map['contact_is_valid'] = event.get('contact_is_valid')


     event.cancel()
    "
    push_previous_map_as_event => true
    timeout => 5
  }
  mutate {
    remove_field => ["group_list", "contact_group_name"]
  }
}

output {
stdout { codec => json_lines }
	elasticsearch {
		index => "contact"
		document_type => "contacts"
		hosts => ["localhost:9200"]
		document_id => "%{contact_id}"
		
	}
} 
